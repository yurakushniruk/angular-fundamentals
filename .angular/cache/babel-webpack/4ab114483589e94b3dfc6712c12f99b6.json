{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../user/auth.service\";\nimport * as i2 from \"./voter.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../common/collapsible-well.component\";\nimport * as i5 from \"./upvote.component\";\nimport * as i6 from \"../shared/duration.pipe\";\n\nfunction SessionListComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"upvote\", 8);\n    i0.ɵɵlistener(\"vote\", function SessionListComponent_div_0_div_2_Template_upvote_vote_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const session_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.toggleVote(session_r1);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const session_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"count\", session_r1.voters.length)(\"voted\", ctx_r2.userHasVoted(session_r1));\n  }\n}\n\nfunction SessionListComponent_div_0_i_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 9);\n  }\n}\n\nfunction SessionListComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵtemplate(2, SessionListComponent_div_0_div_2_Template, 2, 2, \"div\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 4);\n    i0.ɵɵelementStart(4, \"collapsible-well\");\n    i0.ɵɵelementStart(5, \"div\", 5);\n    i0.ɵɵtext(6);\n    i0.ɵɵtemplate(7, SessionListComponent_div_0_i_7_Template, 1, 0, \"i\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 7);\n    i0.ɵɵelementStart(9, \"h6\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"span\");\n    i0.ɵɵtext(12);\n    i0.ɵɵpipe(13, \"duration\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"br\");\n    i0.ɵɵelementStart(15, \"span\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"p\");\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const session_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.authService.isAuthenticated());\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", session_r1.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", session_r1.voters.length > 3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(session_r1.presenter);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Duration: \", i0.ɵɵpipeBind1(13, 7, session_r1.duration), \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Level: \", session_r1.level, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(session_r1.abstract);\n  }\n}\n\nexport let SessionListComponent = /*#__PURE__*/(() => {\n  class SessionListComponent {\n    constructor(authService, voterService) {\n      this.authService = authService;\n      this.voterService = voterService;\n      this.visibleSessions = [];\n    }\n\n    ngOnChanges() {\n      if (this.sessions) {\n        this.filterSessions(this.filterBy);\n        this.sortBy === 'name' ? this.visibleSessions.sort(sortByNameAsc) : this.visibleSessions.sort(sortByVotesDesc);\n      }\n    }\n\n    toggleVote(session) {\n      if (this.userHasVoted(session)) {\n        this.voterService.deleteVoter(session, this.authService.currentUser.userName);\n      } else {\n        this.voterService.addVoter(session, this.authService.currentUser.userName);\n      }\n\n      if (this.sortBy === 'votes') {\n        this.visibleSessions.sort(sortByVotesDesc);\n      }\n    }\n\n    userHasVoted(session) {\n      return this.voterService.userHasVoted(session, this.authService.currentUser.userName);\n    }\n\n    filterSessions(filter) {\n      if (filter === 'all') {\n        this.visibleSessions = this.sessions.slice(0); //creates a complete duplicate of the array with the same elements\n      } else {\n        this.visibleSessions = this.sessions.filter(session => {\n          return session.level.toLocaleLowerCase() === filter;\n        });\n      }\n    }\n\n  }\n\n  SessionListComponent.ɵfac = function SessionListComponent_Factory(t) {\n    return new (t || SessionListComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.VoterService));\n  };\n\n  SessionListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SessionListComponent,\n    selectors: [[\"session-list\"]],\n    inputs: {\n      sessions: \"sessions\",\n      filterBy: \"filterBy\",\n      sortBy: \"sortBy\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"row\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\"], [1, \"col-md-1\"], [4, \"ngIf\"], [1, \"col-md-10\"], [\"well-title\", \"\"], [\"class\", \"glyphicon glyphicon-fire\", \"style\", \"color:red\", 4, \"ngIf\"], [\"well-body\", \"\"], [3, \"count\", \"voted\", \"vote\"], [1, \"glyphicon\", \"glyphicon-fire\", 2, \"color\", \"red\"]],\n    template: function SessionListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SessionListComponent_div_0_Template, 19, 9, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.visibleSessions);\n      }\n    },\n    directives: [i3.NgForOf, i3.NgIf, i4.CollapsibleWellComponent, i5.UpvoteComponent],\n    pipes: [i6.DurationPipe],\n    encapsulation: 2\n  });\n  return SessionListComponent;\n})();\n\nfunction sortByNameAsc(s1, s2) {\n  if (s1.name > s2.name) return 1;else if (s1.name === s2.name) return 0;else return -1;\n}\n\nfunction sortByVotesDesc(s1, s2) {\n  return s2.voters.length - s1.voters.length; //if s2.voters is greater than s1.voters it will return positive number, if equal - 0, otherwise - negative number\n}","map":null,"metadata":{},"sourceType":"module"}